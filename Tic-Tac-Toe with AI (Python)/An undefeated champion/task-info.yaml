type: edu
files:
- name: tictactoe.py
  visible: true
  text: |
    # write your code here
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: |
    from copy import copy

    from hstest import StageTest, dynamic_test, TestedProgram, CheckResult

    from util.enum import GameState, CellState
    from util.grid import Grid
    from util.minimax import Minimax


    class Test:
        def __init__(self, inp, result, state, additional_contains=None):
            self.inp = inp
            self.result = result
            self.state = state
            self.additional_contains = additional_contains


    class TicTacToeTests(StageTest):
        easy_ai_moves = [0 for _ in range(9)]

        @dynamic_test(order=1)
        def test_bad_parameters(self):
            program = TestedProgram()
            program.start()

            output = program.execute("start")

            if "bad parameters" not in output.lower():
                return CheckResult.wrong("After entering start command with wrong parameters you should print "
                                         "'Bad parameters!' and ask to enter a command again!")

            output = program.execute("start easy")

            if "bad parameters" not in output.lower():
                return CheckResult.wrong("After entering start command with wrong parameters you should print "
                                         "'Bad parameters!' and ask to enter a command again!")

            program.execute("exit")

            if not program.is_finished():
                return CheckResult.wrong("After entering 'exit' command you should stop the program!")

            return CheckResult.correct()

        @dynamic_test(order=2)
        def test_grid_output(self):
            program = TestedProgram()
            program.start()

            output = program.execute("start user easy")

            printed_grid = Grid.from_output(output)
            empty_grid = Grid.from_line("_________")

            if printed_grid != empty_grid:
                return CheckResult.wrong(f"After starting the program you should print an empty grid!\n"
                                         f"Correct empty grid:\n{empty_grid}")

            if "enter the coordinates:" not in output.lower():
                return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!")

            output = program.execute("2 2")

            grid_after_move = Grid.from_output(output)
            correct_grid_after_move = Grid.from_line("____X____")

            if grid_after_move != correct_grid_after_move:
                return CheckResult.wrong(f"After making the move wrong grid was printed.\n"
                                         f"Your grid:\n{grid_after_move}\n"
                                         f"Correct grid:\n{correct_grid_after_move}")

            if "making move level \"easy\"" not in output.lower().replace("'", "\""):
                return CheckResult.wrong("After entering a cell coordinates you should print:\n"
                                         "Making move level \"easy\"")

            grid_after_ai_move = Grid.from_output(output, 2)

            if grid_after_ai_move == grid_after_move:
                return CheckResult.wrong("After AI move grid wasn't changed!")

            game_grid = grid_after_ai_move

            while True:
                game_state = game_grid.get_game_state()
                if game_grid.get_game_state() != GameState.NOT_FINISHED:
                    if game_state == GameState.X_WIN and "X wins" not in output:
                        return CheckResult.wrong("You should print 'X wins' if X win the game!")
                    if game_state == GameState.O_WIN and "O wins" not in output:
                        return CheckResult.wrong("You should print 'O wins' if O win the game!")
                    if game_state == GameState.DRAW and "Draw" not in output:
                        return CheckResult.wrong("You should print 'Draw' if the game ends with draw!")
                    break

                next_move = Minimax.get_move(game_grid, CellState.X)
                temp_grid = copy(game_grid)

                temp_grid.set_cell(next_move.x, next_move.y, CellState.X)

                output = program.execute(f"{next_move.x + 1} {next_move.y + 1}")

                game_grid = Grid.from_output(output)

                if game_grid != temp_grid:
                    return CheckResult.wrong(f"After making move ({next_move}) the grid is wrong!\n"
                                             f"Your grid:\n{game_grid}\n"
                                             f"Correct grid:\n{temp_grid}")

                if game_grid.get_game_state() != GameState.NOT_FINISHED:
                    continue

                game_grid = Grid.from_output(output, 2)

            return CheckResult.correct()

        @dynamic_test(repeat=100, order=3)
        def check_easy_ai(self):

            program = TestedProgram()
            program.start()

            program.execute("start user easy")

            output = program.execute("2 2")

            grid_after_ai_move = Grid.from_output(output, 2)

            cells = grid_after_ai_move.get_grid()

            for i in range(9):
                if i == 4:
                    continue

                if cells[int(i / 3)][i % 3] == CellState.O:
                    self.easy_ai_moves[i] += 1

            return CheckResult.correct()

        @dynamic_test(order=4)
        def check_random(self):

            average_score = 0

            for i in range(len(self.easy_ai_moves)):
                average_score += (i + 1) * self.easy_ai_moves[i]

            average_score /= 8

            expected_value = (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8

            if abs(average_score - expected_value) > 20:
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!")

            return CheckResult.correct()

        is_easy_not_moving_like_medium = False

        @dynamic_test(repeat=30, order=5)
        def check_easy_not_moving_like_medium(self):

            if self.is_easy_not_moving_like_medium:
                return CheckResult.correct()

            program = TestedProgram()
            program.start()

            program.execute("start user easy")

            output = program.execute("2 2")

            game_grid = Grid.from_output(output, 2)

            cells = game_grid.get_grid()

            if cells[0][0] == CellState.EMPTY and cells[2][2] == CellState.EMPTY:
                output = program.execute("1 1")
                game_grid = Grid.from_output(output, 2)
                if game_grid.get_grid()[2][2] == CellState.EMPTY:
                    self.is_easy_not_moving_like_medium = True
            else:
                output = program.execute("1 3")
                game_grid = Grid.from_output(output, 2)
                if game_grid.get_grid()[2][0] == CellState.EMPTY:
                    self.is_easy_not_moving_like_medium = True

            return CheckResult.correct()

        @dynamic_test(order=6)
        def check_easy_not_moving_like_medium_after(self):
            if not self.is_easy_not_moving_like_medium:
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!")
            return CheckResult.correct()

        @dynamic_test(order=7)
        def check_easy_vs_easy(self):

            program = TestedProgram()
            program.start()

            output = program.execute("start easy easy")

            grids = Grid.all_grids_from_output(output)

            Grid.check_grid_sequence(grids)

            return CheckResult.correct()

        @dynamic_test(repeat=10, order=8)
        def check_medium_ai(self):

            program = TestedProgram()
            program.start()
            program.execute("start user medium")

            output = program.execute("2 2")

            game_grid = Grid.from_output(output, 2)

            cells = game_grid.get_grid()

            if cells[0][0] == CellState.EMPTY and cells[2][2] == CellState.EMPTY:
                output = program.execute("1 1")
                game_grid = Grid.from_output(output, 2)
                if game_grid.get_grid()[2][2] == CellState.EMPTY:
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!")
            else:
                output = program.execute("1 3")
                game_grid = Grid.from_output(output, 2)
                if game_grid.get_grid()[2][0] == CellState.EMPTY:
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!")

            return CheckResult.correct()

        @dynamic_test(order=9)
        def check_medium_vs_medium(self):

            program = TestedProgram()
            program.start()

            output = program.execute("start medium medium")

            grids = Grid.all_grids_from_output(output)

            Grid.check_grid_sequence(grids)

            return CheckResult.correct()

        is_medium_not_moving_like_hard = False

        @dynamic_test(repeat=30, order=10)
        def check_medium_not_moving_like_hard(self):

            if self.is_medium_not_moving_like_hard:
                return CheckResult.correct()

            program = TestedProgram()
            program.start()

            program.execute("start user medium")

            output = program.execute("2 2")

            user_move_grid = Grid.from_output(output, 1)
            medium_move_grid = Grid.from_output(output, 2)

            medium_move = Grid.get_move(user_move_grid, medium_move_grid)

            minimax_correct_positions = Minimax.get_available_positions(user_move_grid, CellState.O)

            if medium_move not in minimax_correct_positions:
                self.is_medium_not_moving_like_hard = True

            return CheckResult.correct()

        @dynamic_test(order=11)
        def check_medium_not_moving_like_hard_after(self):
            if not self.is_medium_not_moving_like_hard:
                return CheckResult.wrong("Looks like Medium level AI doesn't make a random move!")
            return CheckResult.correct()

        @dynamic_test(order=12)
        def check_hard_ai(self):

            program = TestedProgram()
            program.start()

            output = program.execute("start user hard")

            grid = Grid.from_output(output)

            next_move = Minimax.get_move(grid, CellState.X)

            output = program.execute(f"{next_move.x + 1} {next_move.y + 1}")

            while "win" not in output.lower() and "draw" not in output.lower():
                grid_after_user_move = Grid.from_output(output)
                grid_after_ai_move = Grid.from_output(output, 2)

                ai_move = Grid.get_move(grid_after_user_move, grid_after_ai_move)

                correct_minimax_positions = Minimax.get_available_positions(grid_after_user_move, CellState.O)

                if ai_move not in correct_minimax_positions:
                    return CheckResult.wrong("Your minimax algorithm is wrong! It chooses wrong positions to make a move!")

                next_move = Minimax.get_move(grid_after_ai_move, CellState.X)

                output = program.execute(f"{next_move.x + 1}  {next_move.y + 1}")

            return CheckResult.correct()

        @dynamic_test(repeat=5, order=13)
        def check_hard_vs_hard(self):

            program = TestedProgram()
            program.start()

            output = program.execute("start hard hard")

            if "draw" not in output.lower():
                return CheckResult.wrong(
                    "The result of the game between minimax algorithms should be always 'Draw'!\n"
                    "Make sure your output contains 'Draw'.")

            return CheckResult.correct()


    if __name__ == '__main__':
        TicTacToeTests().run_tests()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test.tests import TicTacToeTests

    if __name__ == '__main__':
        TicTacToeTests().run_tests()
  learner_created: false
- name: oldFunctions.py
  visible: true
  text: |-
    import random


    def initializeField(inputString: str) -> list:
        """
        Initializes a 3 by 3 tic tac toe field, based on a given String

        Parameters
        ----------
        inputString : str
            A String with a length of exactly 9 characters,
            consisting only of the characters 'X', '0' and '_'

        Return
        ----------
        list
            a list in form of a 3 by 3 matrix
        """
        allowedSymbols = "XO_"

        if not (isinstance(inputString, str) and len(inputString) == 9 and all(
                char in allowedSymbols for char in inputString)):
            print("input has to be a string of length 9, containing only X, O and _")
            return []

        # create and populate the tic tac toe field as matrix
        field = []
        for i in range(3):
            field.append([])
            for j in range(3):
                field[i].append(inputString[3 * i + j])

        return field


    def initializeEmptyField() -> list:
        return initializeField("_________")


    def printField(field: list):
        """
        Prints the tic tac toe field

        Parameters
        ----------
        field : list
            List in form of a matrix containing the tic tac toe field
        """
        print("---------")
        for row in field:
            print("| ", end="")
            for tic in row:
                if tic == "_":
                    print("  ", end="")
                else:
                    print(tic + " ", end="")
            print("|")
        print("---------")


    def getColumn(field: list, column: int) -> list:
        return [row[column] for row in field]


    def checkField(field: list) -> int:
        """
        checks the given field for tic tac toe winning conditions

        Parameters
        ----------
        field : list
            List in form of a matrix containing the tic tac toe field

        Returns
        ----------
        int
            0 - if there are still open spaces and no winning condition is triggered
            1 - if X has three in a row
            2 - if 0 has three in a row
            3 - if no fields are open and no winning condition was reached
        """
        outcomes = []
        # add all rows
        for row in field:
            outcomes.append(row)

        # add all columns
        for i in range(len(field[0])):
            outcomes.append(getColumn(field, i))

        # add diagonals
        row = []
        for i in range(len(field)):
            row.append(field[i][i])
        outcomes.append(row)

        row = []
        length = len(field)
        for i in range(length):
            length -= 1
            row.append(field[length][i])
        outcomes.append(row)

        # check for winning conditions
        win_x = ["X", "X", "X"]
        win_O = ["O", "O", "O"]

        if win_x in outcomes:
            print("X wins")
            return 1

        if win_O in outcomes:
            print("O wins")
            return 2

        for row in field:
            if "_" in row:
                # print("Game not finished")
                return 0

        print("Draw")
        return 3


    def countOccurrences(field: list) -> list:
        """
        counts the occurrences of 'X', 'O' and '_' characters in a matrix

        Parameters
        ----------
        field : list
            List in form of a matrix containing the tic tac toe field

        Returns
        ----------
        list
            contains number of X's, number of O's and number of _
        """
        countX = 0
        countO = 0
        count_ = 0

        for row in field:
            for entry in row:
                if entry == "X":
                    countX += 1
                elif entry == "O":
                    countO += 1
                else:
                    count_ += 1

        return [countX, countO, count_]


    def getUserInput() -> list:
        """
        prompts user to input two coordinates, which have to be two integers

        Returns
        ----------
        list
            the two coordinates as list
        """
        userInput = input("Enter the coordinates:").split()
        coordinates = []

        # if len(userInput) != 2:
        #     print("There should only be two coordinates separated by a space!")
        #     return []

        try:
            for coordinate in userInput:
                coordinates.append(int(coordinate))
        except ValueError:
            print("You should enter numbers!")
            return []

        if not (coordinates[0] in [1, 2, 3] and coordinates[1] in [1, 2, 3]):
            print("Coordinates should be from 1 to 3!")
            return []

        return coordinates


    def setUserCoordinates(field: list, possibleMoves: set) -> list:
        coordinates = []

        while not coordinates:
            coordinates = getUserInput()
            if not coordinates:
                continue

            if tuple(coordinates) in possibleMoves:
                setTic(field, coordinates)
                possibleMoves.remove(tuple(coordinates))
            else:
                coordinates = []
                continue


    def computerMove(field: list, possibleMoves: set):
        coordinates = popRandomElement(possibleMoves)
        setTic(field, coordinates)


    def setTic(field: list, coordinates: list):
        occurrences = countOccurrences(field)
        if occurrences[0] <= occurrences[1]:
            field[coordinates[0] - 1][coordinates[1] - 1] = "X"
        else:
            field[coordinates[0] - 1][coordinates[1] - 1] = "O"


    def createPossibleMoves() -> set:
        moves = []
        for i in range(3):
            for j in range(3):
                moves.append((i+1, j+1))

        return set(moves)


    def popRandomElement(mySet: set):
        randomInteger = random.randrange(len(mySet))
        element = list(mySet)[randomInteger]
        mySet.remove(element)
        return element
  learner_created: true
- name: fieldClass.py
  visible: true
  text: |
    class Field:
        def __init__(self, ticString: str = "_________"):
            self.field = self.initializeField(ticString)
            self.possibleMoves = self.createPossibleMoves()

        def initializeField(self, inputString) -> list:
            """
            Initializes a 3 by 3 tic tac toe field, based on a given String

            Parameters
            ----------
            inputString : str
                A String with a length of exactly 9 characters,
                consisting only of the characters 'X', '0' and '_'

            Return
            ----------
            list
                a list in form of a 3 by 3 matrix
            """
            allowedSymbols = "XO_"

            if not (isinstance(inputString, str) and len(inputString) == 9 and all(
                    char in allowedSymbols for char in inputString)):
                print("input has to be a string of length 9, containing only X, O and _")
                return []

            # create and populate the tic tac toe field as matrix
            field = []
            for i in range(3):
                field.append([])
                for j in range(3):
                    field[i].append(inputString[3 * i + j])

            return field

        def printField(self):
            """
            Prints the tic tac toe field

            Parameters
            ----------
            field : list
                List in form of a matrix containing the tic tac toe field
            """
            print("---------")
            for row in self.field:
                print("| ", end="")
                for tic in row:
                    if tic == "_":
                        print("  ", end="")
                    else:
                        print(tic + " ", end="")
                print("|")
            print("---------")

        def getColumn(self, column: int) -> list:
            return [row[column] for row in self.field]

        def checkField(self) -> int:
            """
            checks the given field for tic tac toe winning conditions

            Parameters
            ----------
            field : list
                List in form of a matrix containing the tic tac toe field

            Returns
            ----------
            int
                0 - if there are still open spaces and no winning condition is triggered
                1 - if X has three in a row
                2 - if 0 has three in a row
                3 - if no fields are open and no winning condition was reached
            """
            outcomes = self.getAllOutcomes()

            # check for winning conditions
            win_x = ["X", "X", "X"]
            win_O = ["O", "O", "O"]

            if win_x in outcomes:
                print("X wins")
                return 1

            if win_O in outcomes:
                print("O wins")
                return 2

            for row in self.field:
                if "_" in row:
                    # print("Game not finished")
                    return 0

            print("Draw")
            return 3

        def getAllOutcomes(self):
            outcomes = []
            # add all rows
            for row in self.field:
                outcomes.append(row)

            # add all columns
            for i in range(len(self.field[0])):
                outcomes.append(self.getColumn(i))

            # add diagonals
            row = []
            for i in range(len(self.field)):
                row.append(self.field[i][i])
            outcomes.append(row)

            row = []
            length = len(self.field)
            for i in range(length):
                length -= 1
                row.append(self.field[length][i])
            outcomes.append(row)

            return outcomes

        def countOccurrences(self) -> list:
            """
            counts the occurrences of 'X', 'O' and '_' characters in a matrix

            Parameters
            ----------
            field : list
                List in form of a matrix containing the tic tac toe field

            Returns
            ----------
            list
                contains number of X's, number of O's and number of _
            """
            countX = 0
            countO = 0
            count_ = 0

            for row in self.field:
                for entry in row:
                    if entry == "X":
                        countX += 1
                    elif entry == "O":
                        countO += 1
                    else:
                        count_ += 1

            return [countX, countO, count_]

        def createPossibleMoves(self) -> set:
            moves = []
            for i in range(3):
                for j in range(3):
                    moves.append((i + 1, j + 1))

            return set(moves)
  learner_created: true
- name: players.py
  visible: true
  text: |
    from abc import ABC, abstractmethod
    import random
    import fieldClass


    class Player(ABC):
        @abstractmethod
        def makeMove(self, field: fieldClass.Field):
            pass

        def setTic(self, field: fieldClass.Field, coordinates: list):
            occurrences = field.countOccurrences()
            if occurrences[0] <= occurrences[1]:
                field.field[coordinates[0] - 1][coordinates[1] - 1] = "X"
            else:
                field.field[coordinates[0] - 1][coordinates[1] - 1] = "O"

        def popRandomElement(self, mySet: set):
            randomInteger = random.randrange(len(mySet))
            element = list(mySet)[randomInteger]
            mySet.remove(element)
            return element


    class User(Player):
        def makeMove(self, field: fieldClass.Field):
            self.setUserCoordinates(field)

        def getUserInput(self) -> list:
            """
            prompts user to input two coordinates, which have to be two integers

            Returns
            ----------
            list
                the two coordinates as list
            """
            userInput = input("Enter the coordinates:").split()
            coordinates = []

            # if len(userInput) != 2:
            #     print("There should only be two coordinates separated by a space!")
            #     return []

            try:
                for coordinate in userInput:
                    coordinates.append(int(coordinate))
            except ValueError:
                print("You should enter numbers!")
                return []

            if not (coordinates[0] in [1, 2, 3] and coordinates[1] in [1, 2, 3]):
                print("Coordinates should be from 1 to 3!")
                return []

            return coordinates

        def setUserCoordinates(self, field: fieldClass.Field) -> list:
            coordinates = []

            while not coordinates:
                coordinates = self.getUserInput()
                if not coordinates:
                    continue

                if tuple(coordinates) in field.possibleMoves:
                    self.setTic(field, coordinates)
                    field.possibleMoves.remove(tuple(coordinates))
                else:
                    coordinates = []
                    continue


    class ComputerEasy(Player):
        def makeMove(self, field: fieldClass.Field):
            print("Making move level 'easy'")
            coordinates = self.popRandomElement(field.possibleMoves)
            self.setTic(field, coordinates)


    class ComputerMedium(Player):
        def makeMove(self, field: fieldClass.Field):
            print("Making move level 'Medium'")
            coordinates = self.evaluateMove(field)
            if coordinates:
                self.setTic(field, coordinates)
                field.possibleMoves.remove(coordinates)
            else:
                coordinates = self.popRandomElement(field.possibleMoves)
                self.setTic(field, coordinates)

        def evaluateMove(self, field):
            # evaluate rows
            for i in range(3):
                if (field.field[i].count("X") == 2 or field.field[i].count("O") == 2) and field.field[i].count("_") == 1:
                    return i + 1, field.field[i].index("_") + 1

            # evaluate columns
            for i in range(3):

                if (field.getColumn(i).count("X") == 2 or field.getColumn(i).count("O") == 2) and field.getColumn(i).count("_") == 1:
                    return field.getColumn(i).index("_") + 1, i + 1

            # evaluate diagonals
            row = []
            for i in range(len(field.field)):
                row.append(field.field[i][i])
            if (row.count("X") == 2 or row.count("O") == 2) and row.count("_") == 1:
                return row.index("_") + 1, row.index("_") + 1

            row = []
            length = len(field.field)
            lengthIterator = length
            for i in range(length):
                lengthIterator -= 1
                row.append(field.field[lengthIterator][i])
            if (row.count("X") == 2 or row.count("O") == 2) and row.count("_") == 1:
                return length - row.index("_"), row.index("_") + 1
  learner_created: true
- name: minmax.py
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7443#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Sat, 01 Apr 2023 22:07:54 UTC"
record: -1
